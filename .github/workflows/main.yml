name: build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  create:
    tags:
      - '*'

jobs:
  release:
    needs: test
    runs-on: ubuntu-latest
    env:
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: Python check version
      run: python --version

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python check version
      run: python --version
    - name: Install pipenv
      run: python -m pip install --upgrade pipenv wheel
    - name: Pipenv check version
      run: pipenv --version
    - name: Restore cache
      uses: actions/cache@v2.1.5
      with:
        path: ~/.virtualenvs
        key: ${{ runner.os }}-pipenv-${{ matrix.python-version }}-${{ hashFiles('Pipfile.lock') }}
        restore-keys: |
            ${{ runner.os }}-pipenv-${{ matrix.python-version }}-${{ hashFiles('Pipfile.lock') }}
    - name: Pipenv install dependencies
      run: pipenv install --deploy -d
    - name: Run code quality tools
      run: pipenv run pre-commit run --all-files
    - name: Run pytest
      run: pipenv run python -m pytest --cov=./ --cov-report=xml --log-cli-level=info tests/
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        env_vars: OS,PYTHON
